package org.fortiss.smg.websocket.impl;import java.io.IOException;import java.util.concurrent.TimeoutException;import org.fortiss.smg.actuatormaster.api.IActuatorMaster;import org.fortiss.smg.containermanager.api.ContainerManagerInterface;import org.fortiss.smg.containermanager.api.ContainerManagerQueueNames;import org.fortiss.smg.remoteframework.lib.DefaultProxy;import org.fortiss.smg.remoteframework.lib.DefaultServer;import org.fortiss.smg.usermanager.api.UserManagerInterface;import org.fortiss.smg.usermanager.api.UserManagerQueueNames;import org.fortiss.smg.websocket.api.WebSocketInterface;import org.fortiss.smg.websocket.api.WebSocketQueueNames;import org.fortiss.smg.websocket.impl.communication.SocketServer;import org.fortiss.smg.websocket.impl.utils.ContainerManagerHelper;import org.osgi.framework.BundleActivator;import org.osgi.framework.BundleContext;public class WebSocketActivator implements BundleActivator {	// Logger from sl4j	/*private static org.slf4j.Logger logger = org.slf4j.LoggerFactory			.getLogger(WebSocketActivator.class);	*/	DefaultServer<WebSocketInterface> server;	private SocketServer socketServer;	private DefaultProxy<ContainerManagerInterface> containerM;	private DefaultProxy<UserManagerInterface> userM;	private DefaultProxy<IActuatorMaster> master;	private WebSocketInterface impl;		public WebSocketInterface getImpl() {		return impl;	}	@Override	public void start(BundleContext context) throws Exception {		// register here your services etc.		// DO NOT start heavy operations here - use threads		init();	    System.out.print("WebSocket alive");			}	public void init() throws IOException, TimeoutException {		// To get stored data		containerM = new DefaultProxy<ContainerManagerInterface>(				ContainerManagerInterface.class,				ContainerManagerQueueNames.getContainerManagerInterfaceQueue(),				60000);		ContainerManagerInterface containerMgr = containerM.init();		ContainerManagerHelper.getInstance().setContainerMgr(containerMgr);		// to handle user authorization		userM = new DefaultProxy<UserManagerInterface>(				UserManagerInterface.class,				UserManagerQueueNames.getUserManagerInterfaceQueue(), 60000);		UserManagerInterface userMgr = userM.init();		impl = new WebSocketImpl(containerMgr, userMgr,				socketServer.get_broadcast());		// to handle client connections		server = new DefaultServer<WebSocketInterface>(				WebSocketInterface.class, impl,				WebSocketQueueNames.getWebSocketInterfaceQueue());		server.init();				WebSocketImpl impl_=(WebSocketImpl) impl;		impl_.initSocketServer();		        	}		@Override	public void stop(BundleContext context) throws Exception {		// REMEMBER to destroy all resources, threads and do cleanup		server.destroy();		socketServer.destroy();		containerM.destroy();		userM.destroy();		master.destroy();		//logger.info("WebSocket is dead");	}}