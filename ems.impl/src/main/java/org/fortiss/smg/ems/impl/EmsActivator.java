package org.fortiss.smg.ems.impl;import java.util.ArrayList;import java.util.List;import java.util.concurrent.TimeoutException;import org.fortiss.smg.actuatormaster.api.ActuatorMasterQueueNames;import org.fortiss.smg.actuatormaster.api.IActuatorMaster;import org.fortiss.smg.ems.api.EmsInterface;import org.fortiss.smg.ems.api.EmsQueueNames;import org.osgi.framework.BundleActivator;import org.osgi.framework.BundleContext;import org.osgi.framework.ServiceRegistration;import org.fortiss.smg.remoteframework.lib.DefaultProxy;import org.fortiss.smg.remoteframework.lib.DefaultServer;import org.slf4j.LoggerFactory;public class EmsActivator implements BundleActivator {    private static org.slf4j.Logger logger = LoggerFactory.getLogger(EmsActivator.class);	    DefaultServer<EmsInterface> server;    private EmsImpl impl;    private List<EmsImpl> clients = new ArrayList<EmsImpl>();	IActuatorMaster master4config = null;    // Logger from sl4j    @Override    public void start(BundleContext context) throws Exception {        // register here your services etc.        // DO NOT start heavy operations here - use threads    	DefaultProxy<IActuatorMaster> proxyMaster = new DefaultProxy<IActuatorMaster>(				IActuatorMaster.class,				ActuatorMasterQueueNames.getActuatorMasterInterfaceQueue(),				5000);		try {			master4config = proxyMaster.init();		} catch (TimeoutException e) {			logger.error("EmsClient: Unable to connect to master (Timeout).");		}		        server.init();        logger.info("Ems is alive");    }    @Override    public void stop(BundleContext context) throws Exception {        // REMEMBER to destroy all resources, threads and do cleanup        server.destroy();        logger.info("Ems is dead");    }}