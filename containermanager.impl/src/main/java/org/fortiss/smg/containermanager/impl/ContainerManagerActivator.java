/*
 * Copyright (c) 2011-2015, fortiss GmbH.
 * Licensed under the Apache License, Version 2.0.
 *
 * Use, modification and distribution are subject to the terms specified
 * in the accompanying license file LICENSE.txt located at the root directory
 * of this software distribution.
 */
package org.fortiss.smg.containermanager.impl;import org.fortiss.smg.actuatormaster.api.AbstractListener;import org.fortiss.smg.actuatormaster.api.IActuatorListener;import org.fortiss.smg.actuatormaster.api.AbstractConnector.IOnConnectListener;import org.fortiss.smg.containermanager.api.ContainerManagerInterface;import org.fortiss.smg.containermanager.api.ContainerManagerQueueNames;import org.fortiss.smg.informationbroker.api.InformationBrokerInterface;import org.fortiss.smg.informationbroker.api.InformationBrokerQueueNames;import org.fortiss.smg.remoteframework.lib.DefaultProxy;import org.fortiss.smg.remoteframework.lib.DefaultServer;import org.osgi.framework.BundleActivator;import org.osgi.framework.BundleContext;import org.slf4j.LoggerFactory;public class ContainerManagerActivator implements BundleActivator {//	private static final int TIMEOUTSHORT = 2000;	private static final int TIMEOUTLONG = 5000;	    DefaultServer<IActuatorListener> server;    DefaultServer<ContainerManagerInterface> cmqueryserver;    private AbstractListener serverLogger;    ContainerManagerImpl impl;    // Logger from sl4j    private static org.slf4j.Logger logger = LoggerFactory.getLogger(ContainerManagerActivator.class);        @Override    public void start(BundleContext context) throws Exception {        // register here your services etc.        // DO NOT start heavy operations here - use threads    	    	/*DefaultProxy<InformationBrokerInterface> clientInfo = new DefaultProxy<InformationBrokerInterface>(				InformationBrokerInterface.class,				InformationBrokerQueueNames						.getQueryQueue(), 10000);		InformationBrokerInterface broker = clientInfo.init();*/    	/*    	 * implementation of the CM 		 */		impl = new ContainerManagerImpl(); //broker); //, master);	    /*	     * allow requests from other components via:	     */				cmqueryserver = new DefaultServer<ContainerManagerInterface>(ContainerManagerInterface.class, impl, ContainerManagerQueueNames.getContainerManagerInterfaceQueryQueue());        cmqueryserver.init();                /*         * interested in events (device/double)         */        serverLogger = AbstractListener.registerAsListenerAtServerStatic(impl, "containermanager", ContainerManagerQueueNames.getContainerManagerListenerQueue(), new IOnConnectListener() {						@Override			public void onSuccessFullConnection() {				logger.info("ContainerManager registered as Listener");				}		});                        logger.info("ContainerManager is alive");    }    @Override    public void stop(BundleContext context) throws Exception {        // REMEMBER to destroy all resources, threads and do cleanup    	logger.info("ContainerManager is dead");    	cmqueryserver.destroy();        serverLogger.destroy();            }}